document.addEventListener("touchstart", function () {
}, true);
document.addEventListener("DOMContentLoaded", () => {
    startPHP(true);
});
function startPHP(firstRun) {
    if (firstRun) {
        document.getElementById("Projects").addEventListener("click", changeActiveNavItemPHP);
        document.getElementById("Skills").addEventListener("click", changeActiveNavItemPHP);
        document.getElementById("Contact").addEventListener("click", changeActiveNavItemPHP);
    }
    let activNavItem = document.getElementsByClassName("nav-item active")[0].children[0].textContent;
    if (activNavItem == "Projects") {
        loadsubSitephp(activNavItem);
        buildCarousel();
        buildSmallProjects();
    }
    else if (activNavItem == "Skills") {
        loadsubSitephp(activNavItem);
    }
    else if (activNavItem == "Contact") {
        loadsubSitephp(activNavItem);
    }
}
// @ts-ignore
/** Changes the active NavItem to the clicked one*/
function changeActiveNavItemPHP(e) {
    //@ts-ignore
    let navItem = e.currentTarget;
    let activNavItem = document.getElementsByClassName("nav-item active");
    if (activNavItem.length <= 1) {
        activNavItem[0].children[0].setAttribute("class", "nav-link");
        activNavItem[0].setAttribute("class", "nav-item");
    }
    navItem.setAttribute("class", "nav-link disabled");
    navItem.parentElement.setAttribute("class", "nav-item active");
    start(false);
}
function loadsubSitephp(name) {
    let api = new Api();
    let callback = (request) => {
        if (request.readyState == 4 && request.status == 200) {
            let response = JSON.parse(request.response);
            let oldsubsite = document.getElementsByClassName("content").item(0);
            if (oldsubsite != null) {
                oldsubsite.remove();
            }
            document.getElementById("stickyHead").insertAdjacentHTML("afterend", response.data);
        }
        else if (request.status != 200) {
            let response = JSON.parse(request.response);
            console.log("HTTP Error " + response.code + "\nMessage: " + response.message);
        }
    };
    let subsiteBody = {
        function: 'switchSite',
        subsite: name
    };
    api.makeCall("post" /* POST */, callback, subsiteBody);
}
function buildCarousel() {
    let api = new Api();
    let callback = (request) => {
        if (request.readyState == 4 && request.status == 200) {
            let response = JSON.parse(request.response);
            /**
             * inserte listItems
             */
            let element = document.getElementsByClassName("carousel-indicators").item(0);
            element.insertAdjacentHTML('afterbegin', response.data.listItems);
            /**
             * insert Carousel
             */
            element = document.getElementById("carousel-frame");
            element.insertAdjacentHTML("beforeend", response.data.carouselItems);
        }
        else if (request.status != 200) {
            let response = JSON.parse(request.response);
            console.log(response.message);
        }
    };
    let carouselBody = {
        function: "buildCarousel"
    };
    api.makeCall("post" /* POST */, callback, carouselBody);
}
function buildSmallProjects() {
    let api = new Api();
    let smallProjectsBody = {
        function: "buildSmallProjects"
    };
    /**
     * can be ignored because the callback will be called with the right variable existing.
     * @ts-ignore  */
    let callback = (request) => {
        let response;
        // @ts-ignore
        if (request.readyState == 4 && request.status == 200) {
            // @ts-ignore
            response = JSON.parse(request.response);
            // @ts-ignore
        }
        else if (request.status != 200) {
            // @ts-ignore
            response = JSON.parse(request.response);
        }
        console.log(response.data);
    };
    api.makeCall("post" /* POST */, callback, smallProjectsBody);
}
var HTTPMethod;
(function (HTTPMethod) {
    HTTPMethod["GET"] = "get";
    HTTPMethod["POST"] = "post";
    HTTPMethod["PUT"] = "put";
    HTTPMethod["DELETE"] = "delete";
    HTTPMethod["PATCH"] = "patch";
    HTTPMethod["OPTION"] = "option";
})(HTTPMethod || (HTTPMethod = {}));
class Api {
    constructor() {
        this.request = new XMLHttpRequest();
    }
    makeCall(method, callback, body) {
        this.request.open(method, Api.PHP_PATH, true);
        this.request.onload = event => callback(this.request);
        if (typeof body !== 'undefined') {
            this.request.send(JSON.stringify(body));
        }
        else {
            this.request.send();
        }
    }
}
Api.PHP_PATH = "Resources/Scripts/PHP/backend.php";

//# sourceMappingURL=data:application/json;charset=utf8;base64,
